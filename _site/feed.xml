<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tylerdross</title>
    <description>This is my personal website and portfolio of all my work. 
</description>
    <link>tylerdross.com/</link>
    <atom:link href="tylerdross.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 14 Feb 2017 12:21:35 -0800</pubDate>
    <lastBuildDate>Tue, 14 Feb 2017 12:21:35 -0800</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>A Commit A Day Keeps The Doc Away</title>
        <description>&lt;p&gt;It’s 2017! Guess it’s time to make some resolutions some of which I’ll never accomplish like all good New Years Resolutioners. However, one resolution I think I totally can resolve is spending an hour a day on personal projects. I think an hour a day (at least) is an excellent way to get my other resolution is to finish and ship all my personal projects.&lt;/p&gt;

&lt;p&gt;The first project I’d like to finish is my online tabata timer that integrates with Spotify. I’m making use of material design and react.js to make a beautiful UI/UX that lets users play music along with their work projects without having an annoying beeper remind you to rest. Instead, a change of music moves you to the next session. Ok so I lied a little bit, I won’t be working for a whole hour a day, rather two 25 minute periods with two 5 minute breaks. Still as long as I get the work done and I don’t get distracted I’ll call it a W. I want to finish it in 3 months.&lt;/p&gt;

&lt;p&gt;The other project I have steaming is afterHacks which allows users to demonstrate their hacks online and gets github stars or pull requests. This idea isn’t planned out very well. I won’t be devasted if this idea is scrapped even though I spent 5 bucks on a domain name to motivate myself. Whelp, oh well.&lt;/p&gt;

&lt;p&gt;Another hour of work I consider is this personal site whether I add a blog post or fix some css or js. There’s lots of little things to do like fixing the JS on the front page (mostly for mobile) and making my contact page a little bit more elaborate. I’d also like to make a elaborate blog page/blog list, including more images and interactive materials. I’m thinking I’ll definitely do quarterly updates.&lt;/p&gt;

&lt;p&gt;The last project isn’t really a project but more of a skill building thing. I need to master algorithms and data structures as well as getting C under my belt so I can firmly put it on my resume. It would fun to get into some embedded systems and play with my rasberry pi with some capabilities.&lt;/p&gt;

&lt;p&gt;Knowing me, I’ll probably have a few new projects throughout the year, but I want to end 2017 with all of them finished and shipped (again, a resolution).&lt;/p&gt;

&lt;p&gt;I’m hoping to keep track of my progress with at least a commit a day to keep the doc away, plus I get to see my github profile fill up with green squares.&lt;/p&gt;

&lt;p&gt;Woah this is exciting! Happy New Years!!!&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Jan 2017 00:00:00 -0800</pubDate>
        <link>tylerdross.com/2017/01/01/A-Commit-A-Day-Keeps-The-Doc-Away.html</link>
        <guid isPermaLink="true">tylerdross.com/2017/01/01/A-Commit-A-Day-Keeps-The-Doc-Away.html</guid>
        
        
      </item>
    
      <item>
        <title>A Honest Review Of Jeykll</title>
        <description>&lt;p&gt;I feel like it’s kind of corny to make my first blog post a review of the technology I’m using to make said blog but I don’t really care. The first think I like about Jeykll is how easy it is to set up. I will say however, I already had the developer environment set up so all I had to do set up a git repo and type in the command&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;force&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and I was off to the races. Note, this may be hard if you’ve never used gem or another package manager. Furthermore, everything is already cleanly packaged with sass from the get go and comes with everything you need to build a site in literally seconds. I love the fact that I can prototype my site in another branch, test it with one command,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and merge it back to master, commit and push it into production immediately. I will admit I’m not using it for anything production level and I only have my own white box testing which is mostly typo checking cause… simple static website.&lt;/p&gt;

&lt;p&gt;Now onto the less glamourous parts. There’s a lot going on. While I think it is beginner friendly,I don’t think that’s necessarily a good thing. It’s prepackaged with a nice sass/css package called minima. It’s clean, easy, and looks good right off the bat. If you hate it, Jeykll makes it really nice to find other templates and themes to make your site look really good. However, the default package makes your site a plain, generic blog site. I had to delete so much of their code to make it barebones enough so I could start rebuilding from scratch.&lt;/p&gt;

&lt;p&gt;If you’re only building a blog and were completely new to web development, I could see why it’s helpful. It includes all the layouts necessary and css right there. I’ve even seen other blog sites use the straight minima theme and maybe add a few lines of sass and suddenly blog site.&lt;/p&gt;

&lt;p&gt;However, if you’re building more than one of these sites, it’s going to be relatively annoying to delete all default html files each time and start rebuilding the css, markdowns, file structure from scratch. It would be nice to possibly include the _include, _layouts, and maybe an assets folder to encourage the user to expand. Obviously it’s a fine line between being friendly to beginners and to those maybe slightly more experienced.&lt;/p&gt;

&lt;p&gt;I’m also not a very big fan of Ruby. It’s a fine language, but the few lines I’ve written of it, I feel like I could’ve have written in fewer and more concise lines in Python. I would love this system in Python (and open sourced) so I could really dive in and modify it directly to my needs.&lt;/p&gt;

&lt;p&gt;In the end, I feel like my problems are a little overembellished. It’s a very fast way to build static websites and deploy them rapidly. It includes lots of neat little features and has a very simple templating system. The documentation is clear and very well written. It hasn’t a very clean step by step process on each aspect of the section. It’s so much nicer than my original site which was plain html and css. I honestly can’t imagine using anything else and github-pages is totally free to host. Despite it’s slight learning curve and annoying default file system, I think everyone should use this as their personal site generator especially if they don’t need a backend or click and drag site generators.&lt;/p&gt;

</description>
        <pubDate>Mon, 19 Sep 2016 00:00:00 -0700</pubDate>
        <link>tylerdross.com/2016/09/19/A-Honest-Review-of-Jeykll.html</link>
        <guid isPermaLink="true">tylerdross.com/2016/09/19/A-Honest-Review-of-Jeykll.html</guid>
        
        
      </item>
    
  </channel>
</rss>
